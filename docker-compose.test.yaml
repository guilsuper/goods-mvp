services:
  e2e-tests:
    build:
      context: ./e2e-tests
      dockerfile: Dockerfile
    volumes:
      - ./e2e-tests:/e2e-tests
      - ./test-results:/test-results
    environment:
      - FRONTEND=http://frontend:3000
      - SENDGRID_HOST=http://sendgrid-mock:3000
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
      sendgrid-mock:
        condition: service_healthy
    networks:
      - prod-net

  db-test:
    image: postgres
    tmpfs:
      - /var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - prod-net

  sendgrid-mock:
    build:
      context: ./e2e-tests/sendgrid-mock/
      dockerfile: Dockerfile
    environment:
      - API_KEY=SENDGRID_MOCK_KEY
    ports:
      - "3001:3000"
    networks:
      - prod-net
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 5s
      timeout: 10s
      retries: 10

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    volumes:
      - ./backend:/backend
    ports:
      - "8000:8000"
    environment:
      - DJANGO_DATABASE=production
      - DEBUG=False
      - ALLOWED_HOST=backend

      - POSTGRES_HOST=db-test
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_PORT=5432

      - SECRET_KEY='8_*lw4(^907@enln%2r(av@__8_$w46n-h+s7s_7lm%ar5c_e6'
      - FRONTEND_HOST=http://localhost:3000

      - SENDGRID_HOST=http://sendgrid-mock:3000
      - SENDGRID_API_KEY=SENDGRID_MOCK_KEY
    depends_on:
      db-test:
        condition: service_healthy
      sendgrid-mock:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:8000/api/"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - prod-net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: ["npm", "start"]
    volumes:
      - ./frontend:/front
    ports:
      - "3000:3000"
    stdin_open:
      true
    environment:
      # React variable to ingore Host header
      # Any selenium requests to the frontend without it
      # Cause the "Invalid host header" error
      # This feature is acceptable for testing and development
      - DANGEROUSLY_DISABLE_HOST_CHECK=true
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - prod-net

networks:
  prod-net:
    driver: bridge
